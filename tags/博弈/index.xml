<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>博弈 on Nono Blogs</title><link>https://blog.techfetch.dev/tags/%E5%8D%9A%E5%BC%88/</link><description>Recent content in 博弈 on Nono Blogs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 28 Jun 2024 17:35:19 +0800</lastBuildDate><atom:link href="https://blog.techfetch.dev/tags/%E5%8D%9A%E5%BC%88/index.xml" rel="self" type="application/rss+xml"/><item><title>第三方库的陷阱</title><link>https://blog.techfetch.dev/blog/2024/06/28/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E9%99%B7%E9%98%B1/</link><pubDate>Fri, 28 Jun 2024 17:35:19 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E9%99%B7%E9%98%B1/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 第三方库的陷阱&lt;/li>
&lt;/ul>
&lt;p>今天聊到最近出的第三方日志库的一个漏洞, 可以很低门槛的利用以执行远程命令. 一个日志库和远程命令看着毫不相干, 但是画蛇添足的第三方库遍地都是.&lt;/p>
&lt;p>读的代码越多越感受到很多开源代码的水平非常差, 无论它有多少 k 的 star, star 代表了需求, 不代表开发水平.&lt;/p>
&lt;p>开源的好处是有更多的人来开发, 好处是特性迅速增加, bug 有人来解, 代码有人来审核, 但是水平参差不齐.&lt;/p>
&lt;p>如果没有一个强有力的提交约束, 代码的质量很难保证.&lt;/p>
&lt;p>代码越多增加的攻击面越多&lt;/p>
&lt;p>虽说重复造轮子不好, 但是产品需求就是婴儿车轮子, 一个塑料轮子怎么都用不坏, 装了个飞机轮胎, 徒增攻击面和维护成本. 因此如果只需要婴儿车的轮子, 不需要大材小用.&lt;/p>
&lt;p>维护成本高, 第三方库需要专门的流程和人员去维护. 华为一个魔改的测试框架, 直接导致升级编译器就用例失败, 升级测试框架和升级编译器产生冲突, 维护时要花大量时间继续魔改这条路. 作为参与者深刻体会到魔改三方库的困难. 如果魔改的是特性可以合回开源库还好说, 为了自己的需求去侵入式的定制开发, 会导致很难维护.&lt;/p>
&lt;p>对待第三方库华为创建了一系列流程, 可以说阻力重重.&lt;/p>
&lt;p>门槛收的极紧, 增加的第三方库需要 18 级专家和 20 级部长评审, 基本只有久负盛名的三方库能被使用.&lt;/p>
&lt;p>所有第三方库都放在 thirdparty 文件夹下, 全量编译时 CI 和源库对比, 严格禁止侵入式修改.&lt;/p>
&lt;p>专门的工具追踪所有第三方库的版本, 这部分请了外包人员来管理, 如果开发申请升级版本需要提申请, 部长审核.&lt;/p>
&lt;p>很难找部长去处理这样的事, 当一个流程非常繁琐的时候, 它实际上是在劝你不要这样做.&lt;/p>
&lt;p>对待第三方库应该保持不轻信的态度, 相信自己人的开发.&lt;/p></description></item><item><title>博弈</title><link>https://blog.techfetch.dev/blog/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/%E5%8D%9A%E5%BC%88/</link><pubDate>Fri, 28 Jun 2024 12:10:23 +0800</pubDate><guid>https://blog.techfetch.dev/blog/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/%E5%8D%9A%E5%BC%88/</guid><description/></item><item><title>OKR的陷阱与助力</title><link>https://blog.techfetch.dev/blog/2023/06/27/okr%E7%9A%84%E9%99%B7%E9%98%B1%E4%B8%8E%E5%8A%A9%E5%8A%9B/</link><pubDate>Tue, 27 Jun 2023 15:33:30 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2023/06/27/okr%E7%9A%84%E9%99%B7%E9%98%B1%E4%B8%8E%E5%8A%A9%E5%8A%9B/</guid><description>&lt;h1 id="okr-的陷阱与助力">OKR 的陷阱与助力&lt;/h1>
&lt;blockquote>
&lt;p>2009 年，哈佛商学院发表了一篇名为《疯狂目标》（Goals Gone Wild）的论文。文章用一系列例子解释了“过度追求目标的破坏性”：福特平托（Pinto）汽车油箱爆炸、西尔斯汽车维修中心的漫天要价、安然公司疯狂膨胀的销售目标，以及 1996 年造成 8 人死亡的珠穆朗玛峰灾难。作者提醒说：目标就像是“一种需要谨慎使用和严密监管的处方药”。作者甚至还提出这样的警告：“由于聚焦过度、出现不道德行为、冒险行为增多，以及合作意愿和工作积极性下降等原因，目标会在组织内部引发系统性问题。”目标设定的坏处可能会抵消其所带来的好处，这就是这篇论文的观点。&lt;/p>
&lt;/blockquote>
&lt;h2 id="读这就是-okr">读&amp;quot;这就是 OKR&amp;quot;&lt;/h2>
&lt;p>在前公司实践过 3 年 OKR, 恰逢新公司现在也要转向 OKR, 老板推荐了这本书&lt;a href="https://yd.qq.com/web/reader/72332cb0716aecb27234506">这就是 OKR&lt;/a>.
花了两周时间才断断续续看完, 简单且主观的分享一点未深思的观后感.&lt;/p>
&lt;p>OKR, 原文 objectives and key results, 直译是&lt;strong>目标和关键性结果&lt;/strong>.&lt;/p>
&lt;p>按照谷歌的 OKR 模式, 目标可以分为两种, 承诺型目标, 和愿景型目标. 对待两种类型目标会有不同评价方式. 目标的设立需要仔细思考, 可以参考原书最后一章资源 1 &lt;em>谷歌公司的内部 OKR 模板&lt;/em> 或者 这个&lt;a href="https://www.whatmatters.com/resources/google-okr-playbook">链接&lt;/a>, 对照阅读.&lt;/p>
&lt;p>对关键性结果的设立也需要好好思考, 可以把这个词理解为一个里程碑, 每一次前进时, 朝着最近的里程碑前进, 最终达到目标. 这个里程碑是建议能用数字衡量的, 以此判断自己达到目标与否, 分析产生差距原因.&lt;/p>
&lt;p>由于 OKR 里的关键性结果仍然建议能用数字衡量, 那么它和 KPI 的区别在哪. KPI 是 key performance indicator, 关键绩效指标. 很明显, KPI 没有明确的包含&lt;strong>目标&lt;/strong>.&lt;br>
不考虑目标, 盲目的下发数字任务对企业产生伤害有许多的案例, 书中会举很多例子.&lt;/p></description></item></channel></rss>