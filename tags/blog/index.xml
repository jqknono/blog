<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Nono Blogs</title><link>https://blog.jqknono.com/tags/blog/</link><description>Recent content in Blog on Nono Blogs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 28 May 2024 16:39:14 +0800</lastBuildDate><atom:link href="https://blog.jqknono.com/tags/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>linux网络问题定位</title><link>https://blog.jqknono.com/blog/2024/05/28/linux%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/</link><pubDate>Tue, 28 May 2024 16:39:14 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/28/linux%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/</guid><description>&lt;h2 id="排障工具">排障工具&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>工具&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;th>用法&lt;/th>
 &lt;th>说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>ping&lt;/td>
 &lt;td>测试网络连通性&lt;/td>
 &lt;td>ping baidu.com&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>traceroute&lt;/td>
 &lt;td>路由跟踪&lt;/td>
 &lt;td>traceroute ip&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>route&lt;/td>
 &lt;td>路由表&lt;/td>
 &lt;td>route -n&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netstat&lt;/td>
 &lt;td>网络连接&lt;/td>
 &lt;td>netstat -ano&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>nslookup&lt;/td>
 &lt;td>DNS 解析&lt;/td>
 &lt;td>nslookup baidu.com&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ifconfig&lt;/td>
 &lt;td>网络配置&lt;/td>
 &lt;td>ifconfig&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>arp&lt;/td>
 &lt;td>ARP 缓存&lt;/td>
 &lt;td>arp -a&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>nbtstat&lt;/td>
 &lt;td>NetBIOS&lt;/td>
 &lt;td>nbtstat -n&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netsh&lt;/td>
 &lt;td>网络配置&lt;/td>
 &lt;td>netsh&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>net&lt;/td>
 &lt;td>网络配置&lt;/td>
 &lt;td>net&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpdump&lt;/td>
 &lt;td>网络抓包&lt;/td>
 &lt;td>tcpdump&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wireshark&lt;/td>
 &lt;td>网络抓包&lt;/td>
 &lt;td>wireshark&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ip&lt;/td>
 &lt;td>网络配置&lt;/td>
 &lt;td>ip addr show&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ss&lt;/td>
 &lt;td>网络连接&lt;/td>
 &lt;td>ss -tunlp&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netstat&lt;/td>
 &lt;td>查看网络连接状态&lt;/td>
 &lt;td>netstat -anp&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpdump&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpdump -i eth0 -nn -s 0 -c 1000 -w /tmp/tcpdump.pcap&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>iptables&lt;/td>
 &lt;td>防火墙&lt;/td>
 &lt;td>iptables -L -n -v -t nat -t mangle -t filter&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ss&lt;/td>
 &lt;td>netstat 的替代品&lt;/td>
 &lt;td>ss -anp&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ifconfig&lt;/td>
 &lt;td>查看网卡信息&lt;/td>
 &lt;td>ifconfig eth0&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ip&lt;/td>
 &lt;td>查看网卡信息&lt;/td>
 &lt;td>ip addr show eth0&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>route&lt;/td>
 &lt;td>查看路由表&lt;/td>
 &lt;td>route -n&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>traceroute&lt;/td>
 &lt;td>查看路由跳数&lt;/td>
 &lt;td>traceroute &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ping&lt;/td>
 &lt;td>测试网络连通性&lt;/td>
 &lt;td>ping &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>telnet&lt;/td>
 &lt;td>测试端口连通性&lt;/td>
 &lt;td>telnet &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a> 80&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>nslookup&lt;/td>
 &lt;td>域名解析&lt;/td>
 &lt;td>nslookup &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>dig&lt;/td>
 &lt;td>域名解析&lt;/td>
 &lt;td>dig &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>arp&lt;/td>
 &lt;td>查看 arp 缓存&lt;/td>
 &lt;td>arp -a&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netcat&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>nc -l 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>nmap&lt;/td>
 &lt;td>端口扫描工具&lt;/td>
 &lt;td>nmap -sT -p 80 &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>mtr&lt;/td>
 &lt;td>网络连通性测试工具&lt;/td>
 &lt;td>mtr &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>iperf&lt;/td>
 &lt;td>网络性能测试工具&lt;/td>
 &lt;td>iperf -s -p 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>iptraf&lt;/td>
 &lt;td>网络流量监控工具&lt;/td>
 &lt;td>iptraf -i eth0&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ipcalc&lt;/td>
 &lt;td>IP 地址计算工具&lt;/td>
 &lt;td>ipcalc&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>iftop&lt;/td>
 &lt;td>网络流量监控工具&lt;/td>
 &lt;td>iftop -i eth0&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>iostat&lt;/td>
 &lt;td>磁盘 IO 监控工具&lt;/td>
 &lt;td>iostat -x 1 10&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>vmstat&lt;/td>
 &lt;td>虚拟内存监控工具&lt;/td>
 &lt;td>vmstat 1 10&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>sar&lt;/td>
 &lt;td>系统性能监控工具&lt;/td>
 &lt;td>sar -n DEV 1 10&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>lsof&lt;/td>
 &lt;td>查看文件打开情况&lt;/td>
 &lt;td>lsof -i:80&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>strace&lt;/td>
 &lt;td>跟踪系统调用&lt;/td>
 &lt;td>strace -p 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpflow&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpflow -i eth0 -c -C -p -o /tmp/tcpflow&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpick&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpick -i eth0 -C -p -o /tmp/tcpick&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcptrace&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcptrace -i eth0 -C -p -o /tmp/tcptrace&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpslice&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpslice -i eth0 -C -p -o /tmp/tcpslice&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpstat&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpstat -i eth0 -C -p -o /tmp/tcpstat&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tcpdump&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tcpdump -i eth0 -C -p -o /tmp/tcpdump&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tshark&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>tshark -i eth0 -C -p -o /tmp/tshark&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wireshark&lt;/td>
 &lt;td>抓包工具&lt;/td>
 &lt;td>wireshark -i eth0 -C -p -o /tmp/wireshark&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>socat&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>socat -d -d TCP-LISTEN:1234,fork TCP:www.baidu.com:80&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ncat&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>ncat -l 1234 -c &amp;rsquo;ncat &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a> 80'&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netperf&lt;/td>
 &lt;td>网络性能测试工具&lt;/td>
 &lt;td>netperf -H &lt;a href="https://www.baidu.com">www.baidu.com&lt;/a> -l 60 -t TCP_STREAM&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netcat&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>netcat -l 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>nc&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>nc -l 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netpipe&lt;/td>
 &lt;td>网络性能测试工具&lt;/td>
 &lt;td>netpipe -l 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>netkit&lt;/td>
 &lt;td>网络调试工具&lt;/td>
 &lt;td>netkit -l 1234&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>bridge&lt;/td>
 &lt;td>网桥工具&lt;/td>
 &lt;td>bridge -s&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>K8s集群中如何保留负载均衡后的请求源IP</title><link>https://blog.jqknono.com/blog/2024/05/27/k8s%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BF%9D%E7%95%99%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%90%8E%E7%9A%84%E8%AF%B7%E6%B1%82%E6%BA%90ip/</link><pubDate>Mon, 27 May 2024 11:52:22 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/27/k8s%E9%9B%86%E7%BE%A4%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BF%9D%E7%95%99%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%90%8E%E7%9A%84%E8%AF%B7%E6%B1%82%E6%BA%90ip/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;p>&lt;strong>应用部署&lt;/strong>不一定总是简单的&lt;strong>安装&lt;/strong>和&lt;strong>运行&lt;/strong>, 有时候还需要考虑&lt;strong>网络&lt;/strong>的问题. 本文将介绍如何在&lt;strong>k8s集群&lt;/strong>中使服务能获取到请求的&lt;strong>源IP&lt;/strong>.&lt;/p>
&lt;p>应用提供服务一般依赖输入信息, 输入信息如果不依赖&lt;strong>五元组&lt;/strong>(源 IP, 源端口, 目的 IP, 目的端口, 协议), 那么该服务和&lt;strong>网络耦合性低&lt;/strong>, 不需要关心网络细节.&lt;/p>
&lt;p>因此, 对多数人来说都没有阅读本文的必要, 如果你对网络感兴趣, 或者希望拓宽一点视野, 可以继续阅读下文, 了解更多的服务场景.&lt;/p>
&lt;p>本文基于 k8s &lt;code>v1.29.4&lt;/code>, 文中部分叙述混用了 pod 和 endpoint, 本文场景下可以视为等价.&lt;/p>
&lt;p>&lt;strong>如果有错误, 欢迎指正, 我会及时更正.&lt;/strong>&lt;/p>
&lt;h2 id="为什么源-ip-信息会丢失">为什么源 IP 信息会丢失?&lt;/h2>
&lt;p>我们首先明确源 IP 是什么, 当 A 向 B 发送请求, B 将请求转发给 C, 虽然 C 看到的 IP 协议的源 IP 是 B 的 IP, 但本文把&lt;strong>A的IP&lt;/strong>看作源 IP.&lt;/p>
&lt;p>主要有两类行为会导致源信息丢失:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>网络地址转换(NAT)&lt;/strong>, 目的是节省公网 IPv4, 负载均衡等. 将导致服务端看到的源 IP 是 &lt;strong>NAT&lt;/strong> 设备的 IP, 而不是真实的源 IP.&lt;/li>
&lt;li>&lt;strong>代理(Proxy)&lt;/strong>, &lt;strong>反向代理&lt;/strong>(RP, Reverse Proxy)和&lt;strong>负载均衡&lt;/strong>(LB, Load Balancer)都属于这一类, 下文统称&lt;strong>代理服务器&lt;/strong>. 这类代理服务会将请求转发给后端服务, 但是会将源 IP 替换为自己的 IP.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>NAT 简单来说是&lt;strong>以端口空间换IP空间&lt;/strong>, IPv4 地址有限, 一个 IP 地址可以映射 65535 个端口, 绝大多数时候这些端口没有用完, 因而可以多个子网 IP 共用一个公网 IP, 在端口上区分不同的服务. 其使用形式是: &lt;code>public IP:public port -&amp;gt; private IP_1:private port&lt;/code>, 更多内容请自行参阅&lt;a href="https://www.google.com/search?q=%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换&lt;/a>&lt;/li>
&lt;li>代理服务是为了&lt;strong>隐藏或暴露&lt;/strong>, 代理服务会将请求转发给后端服务, 同时将源 IP 替换为自己的 IP, 以此来隐藏后端服务的真实 IP, 保护后端服务的安全. 代理服务的使用形式是: &lt;code>client IP -&amp;gt; proxy IP -&amp;gt; server IP&lt;/code>, 更多内容请自行参阅&lt;a href="https://www.google.com/search?q=%E4%BB%A3%E7%90%86">代理&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>NAT&lt;/strong>和&lt;strong>代理服务器&lt;/strong>都非常常见, 多数服务都无法获得请求的源 IP.&lt;/p></description></item><item><title>武汉小龙虾市场提供加工服务了</title><link>https://blog.jqknono.com/blog/2024/05/18/%E6%AD%A6%E6%B1%89%E5%B0%8F%E9%BE%99%E8%99%BE%E5%B8%82%E5%9C%BA%E6%8F%90%E4%BE%9B%E5%8A%A0%E5%B7%A5%E6%9C%8D%E5%8A%A1%E4%BA%86/</link><pubDate>Sat, 18 May 2024 12:05:38 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/18/%E6%AD%A6%E6%B1%89%E5%B0%8F%E9%BE%99%E8%99%BE%E5%B8%82%E5%9C%BA%E6%8F%90%E4%BE%9B%E5%8A%A0%E5%B7%A5%E6%9C%8D%E5%8A%A1%E4%BA%86/</guid><description>&lt;p>武汉的&lt;strong>小龙虾&lt;/strong>市场现在提供处理服务了, 买虾后, 虾摊旁提供免费的虾清洗和处理服务, 有三个人一同处理.&lt;/p>
&lt;p>第一批提供虾处理服务的商家, 可以立即获得一些利益, 吸引购买者, 毕竟这是典型的&amp;quot;&lt;strong>人无我有&lt;/strong>&amp;ldquo;的优质服务.&lt;/p>
&lt;p>但是, 该服务门槛较低, 任何商家叫上三个人都可以提供, 而代价却很高, 毕竟虾处理服务占用了三个劳动力. 如果不能抢占足够多的市场, 这个服务迟早成本高于获利.&lt;/p>
&lt;p>只要商贩在这个夏天长期的贩卖小龙虾, 最终会发现这个服务的代价远远高于收益, 但是却无法停止, 因为这个服务已经成为了他们的卖点, 他们的客户已经习惯了这个服务, 一旦停止, 客户就会流失. 你可以一开始就不给客户提供这个服务, 但很难在提供免费服务后撤回.&lt;/p>
&lt;p>有的人做生意会讲究一个&amp;rdquo;&lt;strong>多给一点&lt;/strong>&amp;quot;, 这种策略自然比&amp;quot;少给一点&amp;quot;更受消费者欢迎, 但它无形中增加了商家的成本, 让商家们陷入低意义低门槛的竞争中, 最终大家都挣不到钱而行业枯萎. 所以有些行业到底是因为服务差而没落, 还是因为服务好而没落, 这个问题值得深思.&lt;/p>
&lt;p>许多大企业也有类似亏本赚吆喝的行为, 其目的乃是为了&lt;strong>垄断&lt;/strong>, 直至有一天市场长只有一家打车, 只有一家团购, 这一天才是到了收割的时候. 但我们也可以发现, 它们都不急于收割, 而是通过算法只收割部分人. 一方面赚取定价权带来的超额利润, 另一方面, 使用新产品的低定价对新入场者围追堵截, 防范每一个潜在的竞争对手. 这些大企业已形成&lt;strong>事实上的垄断&lt;/strong>, 韭菜割不割只是时间问题.&lt;/p>
&lt;p>我们在工作中也会遇到不少&amp;quot;卷王&amp;quot;, 很难评估他们是否带来了更多价值, 但能他们明确能做到的就是永远比别人晚下班半小时, 一旦俩卷王较上劲了, &amp;ldquo;多给一点&amp;quot;互锁, 全办公室都得笼罩在其阴影之下. 他们靠着这种低质的服务, 挤压着正常打工者的生存空间. 比的既不是创新, 也不是业绩, 主打的就是&amp;quot;卖苦力&amp;rdquo;, 却能获得老板的青睐, 这显然是一种不正常的恶行竞争.&lt;/p>
&lt;p>最后再说回小龙虾市场, 有人能垄断定价自行定价, 有人能垄断货源专供高端, 而谁能通过&lt;strong>垄断打工而自发打工&lt;/strong>呢?&lt;/p></description></item><item><title>如何提升自建DNS服务下的网络体验</title><link>https://blog.jqknono.com/blog/2024/05/18/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E8%87%AA%E5%BB%BAdns%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E4%BD%93%E9%AA%8C/</link><pubDate>Sat, 18 May 2024 10:46:44 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/18/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E8%87%AA%E5%BB%BAdns%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E4%BD%93%E9%AA%8C/</guid><description>&lt;h2 id="网络质量和网络体验">网络质量和网络体验&lt;/h2>
&lt;blockquote>
&lt;p>什么都不做, 即可以获得最好的网络体验&lt;/p>&lt;/blockquote>
&lt;p>需要明确, 这里&lt;code>网络质量&lt;/code>和&lt;code>网络体验&lt;/code>是两个不同的概念. 通信是一个过程, 涉及多个设备, 我们可以称单个设备的上下行表现为&lt;code>网络质量&lt;/code>, 而整个端到端的通信表现, 我们可以称为&lt;code>网络体验&lt;/code>.&lt;/p>
&lt;h2 id="如何衡量网络质量">如何衡量网络质量&lt;/h2>
&lt;p>衡量网络质量通常涉及多个指标和方法。以下是一些常见的衡量网络质量的方法和指标：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>带宽（Bandwidth）&lt;/strong>：带宽是指网络传输数据的能力，通常以每秒传输的数据量（比特/秒）来衡量。更高的带宽通常表示更好的网络质量。&lt;/li>
&lt;li>&lt;strong>延迟（Latency）&lt;/strong>：延迟是指数据从发送端到接收端所需的时间。低延迟表示数据传输速度快，网络响应更快。&lt;/li>
&lt;li>&lt;strong>丢包率（Packet Loss Rate）&lt;/strong>：丢包率是指在数据传输过程中丢失的数据包的比例。较低的丢包率通常意味着网络质量较好。&lt;/li>
&lt;li>&lt;strong>抖动（Jitter）&lt;/strong>：抖动是指数据包在传输过程中的变化或波动。较小的抖动表示网络稳定性较高。&lt;/li>
&lt;li>&lt;strong>吞吐量（Throughput）&lt;/strong>：吞吐量是指网络传输的实际数据量，通常以单位时间内的数据传输量来衡量。更高的吞吐量表示网络质量更好。&lt;/li>
&lt;li>&lt;strong>网络拓扑（Network Topology）&lt;/strong>：网络拓扑描述了网络中节点之间的连接方式和结构。合理的网络拓扑设计可以提高网络性能和质量。&lt;/li>
&lt;li>&lt;strong>服务质量（Quality of Service，QoS）&lt;/strong>：QoS 是一组技术和机制，用于确保在网络中的数据传输中实现可接受的服务质量。QoS 可以通过各种方式实现，包括流量控制、优先级队列等。&lt;/li>
&lt;li>&lt;strong>网络协议分析（Protocol Analysis）&lt;/strong>：通过分析网络协议和数据包，可以了解网络中的性能指标和问题，例如使用 Wireshark 等网络分析工具。&lt;/li>
&lt;/ol>
&lt;p>综合利用这些指标和方法，可以全面地评估网络质量，确定网络性能的优势和改进的空间。 但这些是运营商关注的指标, 对于普通用户, 只需要购买价格合适的路由器即可, 现代路由器都有自动调整网络质量的功能.&lt;/p>
&lt;h2 id="如何衡量网络体验">如何衡量网络体验&lt;/h2>
&lt;p>首先是&lt;strong>可访问性&lt;/strong>, 能访问是最重要的基础. 因此, 域名解析服务需要满足基础的能力:&lt;/p>
&lt;ul>
&lt;li>全面, 上级 DNS 服务需要权威, 且能够解析更多的域名&lt;/li>
&lt;li>正确, 解析结果需要正确, 不能出现解析错误. 部分 DNS 服务商会对一些域名进行劫持或污染, 解析到广告页面.&lt;/li>
&lt;li>及时, ip 地址变更后, 需要及时更新解析结果, 而不是返回旧的 ip 地址&lt;/li>
&lt;/ul>
&lt;p>其次是 DNS 解析结果的 IP 所能提供服务的&lt;code>网络质量&lt;/code>.&lt;/p>
&lt;p>互联网服务所能提供的&lt;code>网络质量&lt;/code>, 通常&lt;strong>强依赖地域&lt;/strong>, 服务器和客户端在地域上越接近, 则服务质量越好.&lt;/p>
&lt;p>许多付费 DNS 解析服务商都支持按地域解析不同 IP, 例如这是阿里云能提供的一部分服务:&lt;/p></description></item><item><title>设计模式究竟有几个原则</title><link>https://blog.jqknono.com/blog/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%87%A0%E4%B8%AA%E5%8E%9F%E5%88%99/</link><pubDate>Thu, 16 May 2024 13:03:16 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%87%A0%E4%B8%AA%E5%8E%9F%E5%88%99/</guid><description>&lt;p>最早总结的设计模式只有 5 个, 即&lt;code>SOLID&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>单一职责原则 (Single Responsibility Principle, SRP)&lt;/code>：一个类应该只有一个引起变化的原因，即一个类应该只有一个责任。&lt;/li>
&lt;li>&lt;code>开闭原则 (Open/Closed Principle, OCP)&lt;/code>：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭，即应该通过扩展来实现变化，而不是通过修改已有的代码。&lt;/li>
&lt;li>&lt;code>里氏替换原则 (Liskov Substitution Principle, LSP)&lt;/code>：子类型必须能够替换其基类型，即派生类必须能够替换其基类而不影响程序的正确性。&lt;/li>
&lt;li>&lt;code>接口隔离原则 (Interface Segregation Principle, ISP)&lt;/code>：不应该强迫客户端依赖于它们不使用的接口。应该将大接口拆分成更小的、更具体的接口，以便客户端只需知道它们需要使用的方法。&lt;/li>
&lt;li>&lt;code>依赖倒置原则 (Dependency Inversion Principle, DIP)&lt;/code>：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖于具体实现细节，具体实现细节应该依赖于抽象。&lt;/li>
&lt;/ul>
&lt;p>后来增加了两个规则, 这些后加的规则相较来说更具体, 更有指导性. 我们从原则解释中可以看到&lt;code>SOLID&lt;/code>描述&lt;code>应该怎么做&lt;/code>, 后加的规则描述&lt;code>优先/最好怎么做&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>合成/聚合复用原则 (Composition/Aggregation Reuse Principle, CARP)&lt;/code>：应该优先使用对象组合（合成）和聚合，而不是继承来达到代码复用的目的。&lt;/li>
&lt;li>&lt;code>迪米特法则 (Law of Demeter, LoD)&lt;/code>：一个对象应该对其他对象有尽可能少的了解，即一个对象应该对其它对象的内部结构和实现细节知道得越少越好。&lt;/li>
&lt;/ul>
&lt;p>除了上述提到的常见设计原则外，还有一些其他的设计原则，虽然不如前面提到的那些广为人知，但同样对软件设计和架构有重要的指导作用。
后续提出的这些规则, 有点画蛇添足, 至少我认为它们不反直觉, 不需要深入思考.&lt;/p>
&lt;ul>
&lt;li>&lt;code>最少知识原则 (Principle of Least Knowledge, PoLK)&lt;/code>：也被称为迪米特法则的扩展，主张一个对象应该尽可能少地了解其他对象的信息。这个原则的产生可以追溯到 1987 年由帕特里夏·莱塞尔（Patricia Lago）和科威特·伯克（Koos Visser）提出的“最少通信法则”。&lt;/li>
&lt;li>&lt;code>稳定依赖原则 (Stable Dependencies Principle, SDP)&lt;/code>：该原则认为软件设计应该确保稳定的组件不依赖于不稳定的组件，即稳定性较高的组件应该更少地依赖于稳定性较低的组件。这个原则的思想来源于对软件系统中组件之间关系的深入研究。&lt;/li>
&lt;li>&lt;code>稳定抽象原则 (Stable Abstraction Principle, SAP)&lt;/code>：与稳定依赖原则相呼应，该原则指导着将抽象性与稳定性相匹配，即稳定的组件应该是抽象的，而不稳定的组件应该是具体的。这个原则有助于确保软件系统的稳定性和灵活性。&lt;/li>
&lt;/ul></description></item><item><title>ChatGPT VPN识别绕过方法</title><link>https://blog.jqknono.com/blog/2024/05/09/chatgpt-vpn%E8%AF%86%E5%88%AB%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</link><pubDate>Thu, 09 May 2024 10:30:29 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/09/chatgpt-vpn%E8%AF%86%E5%88%AB%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95/</guid><description>&lt;p>如何处理 ChatGPT 报错&lt;br>
&amp;ldquo;Unable to load site&amp;rdquo;&lt;br>
&amp;ldquo;Please try again later, if you are using a VPN, try turning it off.&amp;rdquo;&lt;br>
&amp;ldquo;Check the status page for information on outages.&amp;rdquo;&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;img src="https://s2.loli.net/2024/05/09/dT4xi1mwFgYRKhq.png" alt="">&lt;/p>
&lt;p>chatgpt 目前仍然是使用体验最好的聊天机器人，但是在国内使用时，由于网络环境的限制，我们需要使用梯子来访问 chatgpt。但是 chatgpt 对梯子的检测较为严格，如果检测到使用了梯子，会直接拒绝访问。这里介绍一种绕过 chatgpt 对梯子检测的方法。&lt;/p>
&lt;p>有其他人提到更换 IP 来绕过封锁, 但我们一般使用 IP 的地域已经是可以提供服务的地区, 所以这种方法并不一定是实际的拒绝服务原因.&lt;/p>
&lt;p>另外有人提到梯子使用人数较多容易被识别, 劝人购买较贵的使用人数少的梯子, 这也很难成为合理理由, 在 ipv4 短缺的今天, 即便是海外, 也存在大量的社区使用 nat 分配端口, 共用一个 ipv4 的情况. chatgpt 一封就要封一大片, 作为一个被广泛使用的服务, 这样的检测设计肯定是不合理的.&lt;/p>
&lt;p>对大众服务来说, 检测源 IP 一致性则更为合理. 付费梯子的特征通常是限制流量或限制网速, 因此多数使用梯子的用户选择按规则绕过. 绕过自己的运营商可直接访问的地址, 以减少流量消耗, 或者获得更快的访问速度, 仅在访问被防火墙拦截的地址时导入流量到代理. 这种访问目标服务的不同方式, 可能会造成源地址不一致. 例如访问 A 服务需要同时和域名 X 和域名 Y 进行通信, 而防火墙仅拦截了域名 X, 那么在 A 服务看到的同一请求的不同阶段的访问来源 IP 不一致.&lt;/p></description></item><item><title>Windows Edge浏览器卡顿的一种解决办法</title><link>https://blog.jqknono.com/blog/2024/05/07/windows-edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%A1%E9%A1%BF%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Tue, 07 May 2024 11:48:37 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/05/07/windows-edge%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8D%A1%E9%A1%BF%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>&lt;h2 id="浏览器版本">浏览器版本&lt;/h2>
&lt;p>&lt;code>122.0.2365.80+&lt;/code>&lt;/p>
&lt;h2 id="卡顿现象">卡顿现象&lt;/h2>
&lt;ul>
&lt;li>打开个人 profile 时卡顿&lt;/li>
&lt;li>打开和搜索存储密码时卡顿&lt;/li>
&lt;li>新建和关闭 tab 时卡顿&lt;/li>
&lt;li>在新建的 tab 中输入字符时卡顿&lt;/li>
&lt;/ul>
&lt;p>目前发现仅中文版 Windows 系统会出现此类型的卡顿.&lt;/p>
&lt;h2 id="解决办法">解决办法&lt;/h2>
&lt;p>中文浏览器设置路径: &lt;code>隐私-搜索-服务 -&amp;gt; 地址栏和搜索 -&amp;gt; 搜索建议和筛选器 -&amp;gt; 搜索筛选器&lt;/code>, &lt;strong>关闭&lt;/strong>搜索筛选器.&lt;/p>
&lt;p>英文浏览器设置路径: &lt;code>Privacy search and services -&amp;gt; Address bar and search -&amp;gt; Search sugesstion and filters -&amp;gt; Search filters&lt;/code>, &lt;strong>TURN OFF&lt;/strong> Search filters.&lt;/p>
&lt;p>&lt;img src="https://s2.loli.net/2024/05/07/yhBqcLiaFAkdp3G.png" alt="设置指导">&lt;/p></description></item></channel></rss>