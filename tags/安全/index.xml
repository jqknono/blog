<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>安全 on Nono Blogs</title><link>https://blog.techfetch.dev/tags/%E5%AE%89%E5%85%A8/</link><description>Recent content in 安全 on Nono Blogs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 28 Jun 2024 19:03:59 +0800</lastBuildDate><atom:link href="https://blog.techfetch.dev/tags/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>snort</title><link>https://blog.techfetch.dev/blog/2024/06/28/snort/</link><pubDate>Fri, 28 Jun 2024 19:03:59 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/snort/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> snort&lt;/li>
&lt;/ul>
&lt;h1 id="snort">Snort&lt;/h1>
&lt;p>&lt;a href="https://www.snort.org/">https://www.snort.org/&lt;/a>&lt;/p>
&lt;p>Protect your network with the world&amp;rsquo;s most powerful Open Source detection software.&lt;/p>
&lt;p>&lt;strong>What is Snort?&lt;/strong>
Snort is the foremost Open Source Intrusion Prevention System (IPS) in the world.
Snort IPS uses a series of rules that help define malicious network activity and
uses those rules to find packets that match against them and generates alerts for users.&lt;/p>
&lt;p>Snort can be deployed inline to stop these packets, as well.
Snort has three primary uses: As a packet sniffer like tcpdump, as a packet logger —
which is useful for network traffic debugging, or it can be used as a full-blown network intrusion prevention system.
Snort can be downloaded and configured for personal and business use alike.&lt;/p></description></item><item><title>可信设计</title><link>https://blog.techfetch.dev/blog/2024/06/28/%E5%8F%AF%E4%BF%A1%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 28 Jun 2024 15:49:18 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/%E5%8F%AF%E4%BF%A1%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="安全架构与设计原则">安全架构与设计原则&lt;/h1>
&lt;h2 id="安全三要素与安全设计原则">安全三要素与安全设计原则&lt;/h2>
&lt;ul>
&lt;li>完整性 Integrity&lt;/li>
&lt;li>可用性 Availability&lt;/li>
&lt;li>机密性 Confidentiality&lt;/li>
&lt;/ul>
&lt;h2 id="开放设计原则">开放设计原则&lt;/h2>
&lt;p>Open Design&lt;/p>
&lt;ul>
&lt;li>设计不应该是秘密, 开放设计更安全.&lt;/li>
&lt;li>安全不依赖保密.&lt;/li>
&lt;/ul>
&lt;h2 id="失败-默认安全原则">失败-默认安全原则&lt;/h2>
&lt;p>Fail-safe defaults&lt;/p>
&lt;ul>
&lt;li>访问决策基于&amp;quot;允许&amp;quot;, 而不是&amp;quot;拒绝&amp;quot;.&lt;/li>
&lt;li>默认情况下不允许访问, 保护机制仅用来识别允许访问的情况.&lt;/li>
&lt;li>失败安全: 任何一个复杂系统应该有功能失效后的应急安全机制, 另外对错误消息和日志要小心, 防止信息泄露.&lt;/li>
&lt;li>默认安全: 系统在初始状态下, 默认配置是安全的, 通过使用最少的系统和服务来提供最大的安全性.&lt;/li>
&lt;/ul>
&lt;h2 id="权限分离原则">权限分离原则&lt;/h2>
&lt;p>Separation of Privilege&lt;/p>
&lt;ul>
&lt;li>一种保护机制需要使用两把钥匙来解锁, 比使用一把钥匙要更健壮和更灵活.&lt;/li>
&lt;li>权限分离的目的&lt;/li>
&lt;li>防止利益冲突, 个别权力滥用&lt;/li>
&lt;li>对某一重要权限分解为多个权限, 让需要保护的对象更难被非法获取, 从而也更安全.&lt;/li>
&lt;li>分离不同进程的权责&lt;/li>
&lt;/ul>
&lt;p>系统可以默认设置 3 个角色, 角色间系统账号权限相互独立, 权责分离:&lt;/p>
&lt;ul>
&lt;li>系统管理员: 负责系统的日常用户管理, 配置管理.&lt;/li>
&lt;li>安全管理员: 负责对用户状态, 安全配置的激活, 去激活管理.&lt;/li>
&lt;li>安全审计员: 负责对前面二者的操作做日志审计, 并拥有日志导出权限, 保证系统用户所有操作的可追溯性.&lt;/li>
&lt;/ul>
&lt;h2 id="最小权限原则">最小权限原则&lt;/h2>
&lt;p>Least Privilege&lt;/p>
&lt;ul>
&lt;li>系统的每一个用户, 每一个程序, 都应该使用最小且必须的权限集来完成工作.&lt;/li>
&lt;li>确保应用程序使用最低的权限运行.&lt;/li>
&lt;li>对系统中各用户运行各类程序, 如数据库, WEB 服务器登, 要注意最小权限的账户运行或连接, 不能是系统最高权限的账号.&lt;/li>
&lt;li>新建账号时, 默认赋给最小权限的角色.&lt;/li>
&lt;/ul>
&lt;h2 id="经济使用原则">经济使用原则&lt;/h2>
&lt;p>Economy of Mechanism&lt;/p></description></item><item><title>华为可信概念</title><link>https://blog.techfetch.dev/blog/2024/06/28/%E5%8D%8E%E4%B8%BA%E5%8F%AF%E4%BF%A1%E6%A6%82%E5%BF%B5/</link><pubDate>Fri, 28 Jun 2024 15:49:02 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/%E5%8D%8E%E4%B8%BA%E5%8F%AF%E4%BF%A1%E6%A6%82%E5%BF%B5/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;input disabled="" type="checkbox"> 华为可信概念&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安全性（Security）：产品有良好的抗攻击能力，保护业务和数据的机密性、完整性和可用性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>韧性（Resilience）：系统受攻击时保持有定义的运行状态（包括降级），遭遇攻击后快速恢复并持续演进的能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>隐私性（Privacy）：遵从隐私保护既是法律法规的要求，也是价值观的体现。用户应该能够适当地控制他们的数据的使用方式。信息的使用政策应该是对用户透明的。用户应该根据自己的需要来控制何时接收以及是否接收信息。用户的隐私数据要有完善的保护能力和机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安全性（Safety）：系统失效导致的危害不存在不可接受的风险，不会伤害自然人生命或危及自然人健康，不管是直接还是通过损害环境或财产间接造成的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可靠性和可用性（Reliability&amp;amp; Availability）：产品能在生命周期内长期保障业务无故障运行，具备快速恢复和自我管理的能力，提供可预期的、一致的服务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>ref:&lt;/p>
&lt;p>&lt;a href="https://www.huawei.com/cn/trust-center/trustworthy#we-offer">华为.我们提供什么&lt;/a>&lt;/p></description></item><item><title>华为内网网络安全分析</title><link>https://blog.techfetch.dev/blog/2024/06/28/%E5%8D%8E%E4%B8%BA%E5%86%85%E7%BD%91%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/</link><pubDate>Fri, 28 Jun 2024 15:48:48 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/%E5%8D%8E%E4%B8%BA%E5%86%85%E7%BD%91%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 华为内网网络安全分析&lt;/li>
&lt;/ul>
&lt;p>华为公司内部有很多不错的学习资料，自己也总结了很多知识经验，一直想着如何导入到自己的知识库。我清楚的明白这些通用化的知识是不涉密不敏感的，但信息安全警钟长鸣，让人心痒又不敢越雷池一步。经过一些测试，我发现公司的网络安全保护比较难突破。本文将对研发区黄区作一点粗略解析。绿区属于自由区域，默认无重要信息，一般为外围工作人员的网络。红区为超高级别的网络防护，目前尚未有长时间深入接触，简单接触到的红区位于网络设备实验室，存放各种大型交换机框架，是公司内网的枢纽，攻破红区的话就相当于攻破了区域网络，至少一栋楼的网络是可以瘫痪一段时间的。&lt;/p>
&lt;h2 id="路由器防火墙方式">路由器防火墙方式&lt;/h2>
&lt;p>&lt;strong>加密&lt;/strong>：加密使用公钥，什么是公钥，简单理解为钥匙，这把钥匙可以人手一把，但只能上锁，不可以开锁。以上是极为具现化的表达，下边会稍微抽象一点，公钥是一个数字 A，有一条信息 M，用 A 对 M 进行加密操作$$f(A, M)$$，得到的信息无法轻易反向解密，类似对数字求平方和求开方的难度区别，合并同类项和因式分解的难度区别。反向解密会非常困难且耗时，使用超级计算机也需要数年乃至数十年。&lt;/p>
&lt;p>&lt;strong>解密&lt;/strong>：服务端使用私钥揭秘，四面八方汇聚来的已加密信息可以使用同一把私钥解密。&lt;/p>
&lt;p>&lt;strong>中间人&lt;/strong>：中间人角色类似传话筒，对客户端它是服务端，在服务端看来它是一个普通用户。因为传声筒的角色，双方的信息它都一览无余。简单描述的话，华为自身扮演了一个非常强大的中间人，所有外发的网络流量都会经过其扫描，不使用 80/443 端口的流量会全部拦截。&lt;/p>
&lt;p>&lt;strong>如何破解&lt;/strong>：由于黄区只有特定端口可以走代理服务器进出公网，对其它端口默认全封，那么严格来说网络流量就没有漏洞。我们可以手动生成密钥，在内网手动加密，再在外网手动解密，这样至少中间人看到的信息无法真正解析。加密器如何发送至内网，邮件/welink/网页都可以，但都会留下痕迹，其中通过网页直接秘密发送影响最小，痕迹最不明显。或者直接把密钥抄纸上，公司电脑保存起来，完全无法察觉，除了公司内遍布的摄像头。github 上的 ssh 贴心的支持 ssh over 443，经过测试发现也行不通，毕竟代理作为防火墙可以轻易识别这样的高风险网站。根据自身体验，公司的防火墙是基于白名单，而非黑名单，也就是即便是自建 ssh 服务器，也会被代理拦住。在浏览器中访问未知网站会有跳转页面提示“后果自负”，在终端窗口中直接就显示链接被关了。&lt;/p>
&lt;p>华为毕竟是搞网络起家，搞网络的能人异士众多，技术上几乎无法突破，恐怕唯有社会工程能突破了。&lt;/p>
&lt;h2 id="本地防火墙方式">本地防火墙方式&lt;/h2>
&lt;p>Windows 系统会安装安全应用，用户无法随意更改配置，配置由管理员统一下发。应用的网络访问权限可能是黑白名单方式，部分应用无法访问网络。vscode 的新版无法走代理通道。&lt;/p></description></item><item><title>DoS防范</title><link>https://blog.techfetch.dev/blog/2024/06/28/dos%E9%98%B2%E8%8C%83/</link><pubDate>Fri, 28 Jun 2024 15:47:44 +0800</pubDate><guid>https://blog.techfetch.dev/blog/2024/06/28/dos%E9%98%B2%E8%8C%83/</guid><description>&lt;h1 id="ddos-防范">DDoS 防范&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Denial-of-service_attack">DDoS 定义&lt;/a>&lt;/p>
&lt;p>两种 DoS 攻击方式:&lt;/p>
&lt;ul>
&lt;li>使服务崩溃&lt;/li>
&lt;li>使网络拥塞&lt;/li>
&lt;/ul>
&lt;h2 id="攻击类型">攻击类型&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>攻击类型&lt;/th>
 &lt;th>攻击方式&lt;/th>
 &lt;th>应对方式&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Distributed DoS&lt;/td>
 &lt;td>多台独立 IP 的机器同时开始攻击&lt;/td>
 &lt;td>1. 降级服务 2. 黑名单 3. 关闭网络设备&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Yo-yo attack 悠悠球攻击&lt;/td>
 &lt;td>对有自动扩展资源能力的服务, 在资源减少的间隙进行攻击&lt;/td>
 &lt;td>黑名单&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application layer attacks 应用层攻击&lt;/td>
 &lt;td>针对特定的功能或特性进行攻击，&lt;a href="https://en.wikipedia.org/wiki/LAND">LAND&lt;/a> 攻击属于这种类型&lt;/td>
 &lt;td>黑名单&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>LANS&lt;/td>
 &lt;td>这种攻击方式采用了特别构造的 TCP SYN 数据包（通常用于开启一个新的连接），使目标机器开启一个源地址与目标地址均为自身 IP 地址的空连接，持续地自我应答，消耗系统资源直至崩溃。这种攻击方法与 SYN 洪泛攻击并不相同。&lt;/td>
 &lt;td>黑名单&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Advanced persistent DoS 高级持续性 DoS&lt;/td>
 &lt;td>反侦察/目标明确/逃避反制/长时间攻击/大算力/多线程攻击&lt;/td>
 &lt;td>降级服务&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>HTTP slow POST DoS attack 慢 post 攻击&lt;/td>
 &lt;td>创造合法连接后以极慢的速度发送大量数据, 导致服务器资源耗尽&lt;/td>
 &lt;td>降级服务&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Challenge Collapsar (CC) attack 挑战 Collapsar (CC) 攻击&lt;/td>
 &lt;td>将标准合法请求频繁发送，该请求会占用较多资源，比如搜索引擎会占用大量的内存&lt;/td>
 &lt;td>降级服务，内容识别&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ICMP flood Internet 控制消息协议 (ICMP) 洪水&lt;/td>
 &lt;td>大量 ping/错误 ping 包 /Ping of death(malformed ping packet)&lt;/td>
 &lt;td>降级服务&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>永久拒绝服务攻击 Permanent denial-of-service attacks&lt;/td>
 &lt;td>对硬件进行攻击&lt;/td>
 &lt;td>内容识别&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>反射攻击 Reflected attack&lt;/td>
 &lt;td>向第三方发送请求，通过伪造地址，将回复引导至真正受害者&lt;/td>
 &lt;td>ddos 范畴&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Amplification 放大&lt;/td>
 &lt;td>利用一些服务作为反射器，将流量放大&lt;/td>
 &lt;td>ddos 范畴&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Mirai botnet 僵尸网络&lt;/td>
 &lt;td>利用被控制的物联网设备&lt;/td>
 &lt;td>ddos 范畴&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SACK Panic 麻袋恐慌&lt;/td>
 &lt;td>操作最大段大小和选择性确认，导致重传&lt;/td>
 &lt;td>内容识别&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shrew attack 泼妇攻击&lt;/td>
 &lt;td>利用 TCP 重传超时机制的弱点，使用短暂的同步流量突发中断同一链路上的 TCP 连接&lt;/td>
 &lt;td>超时丢弃&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>慢读攻击 Slow Read attack&lt;/td>
 &lt;td>和慢 post 类似，发送合法请求，但读取非常慢， 以耗尽连接池，通过为 TCP Receive Window 大小通告一个非常小的数字来实现&lt;/td>
 &lt;td>超时断连，降级服务，黑名单&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SYN flood SYN 洪水&lt;/td>
 &lt;td>发送大量 TCP/SYN 数据包， 导致服务器产生半开连接&lt;/td>
 &lt;td>超时机制&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>泪珠攻击 Teardrop attacks&lt;/td>
 &lt;td>向目标机器发送带有重叠、超大有效负载的损坏 IP 片段&lt;/td>
 &lt;td>内容识别&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>TTL 过期攻击&lt;/td>
 &lt;td>当由于 TTL 过期而丢弃数据包时，路由器 CPU 必须生成并发送 ICMP 超时响应。生成许多 ​​ 这样的响应会使路由器的 CPU 过载&lt;/td>
 &lt;td>丢弃流量&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>UPnP 攻击&lt;/td>
 &lt;td>基于 DNS 放大技术，但攻击机制是一个 UPnP 路由器，它将请求从一个外部源转发到另一个源，而忽略 UPnP 行为规则&lt;/td>
 &lt;td>降级服务&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SSDP 反射攻击&lt;/td>
 &lt;td>许多设备，包括一些住宅路由器，都在 UPnP 软件中存在漏洞，攻击者可以利用该漏洞从端口号 1900 获取对他们选择的目标地址的回复。&lt;/td>
 &lt;td>降级服务， 封禁端口&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>ARP 欺骗&lt;/td>
 &lt;td>将 MAC 地址与另一台计算机或网关（如路由器）的 IP 地址相关联，导致原本用于原始真实 IP 的流量重新路由到攻击者，导致拒绝服务。&lt;/td>
 &lt;td>ddos 范畴&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="防范措施">防范措施&lt;/h2>
&lt;ol>
&lt;li>识别攻击流量
&lt;ul>
&lt;li>破坏服务
&lt;ul>
&lt;li>识别流量内容&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>拥塞服务
&lt;ul>
&lt;li>记录访问时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对攻击流量进行处理
&lt;ul>
&lt;li>丢弃攻击流量&lt;/li>
&lt;li>封禁攻击 ip
&lt;ul>
&lt;li>ipv4 ip 数量有限, 容易构造黑名单&lt;/li>
&lt;li>ipv6 数量较多, 不容易构造黑名单. 可以使用 ipv6 的地址段, 但有错封禁的风险&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>控制访问频率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="开源工具">开源工具&lt;/h2>
&lt;h3 id="攻击工具">攻击工具&lt;/h3>
&lt;ul>
&lt;li>&lt;del>&lt;a href="https://github.com/palahsu/DDoS-Ripper">https://github.com/palahsu/DDoS-Ripper&lt;/a>&lt;/del>
&lt;ul>
&lt;li>162 forks, 755 stars&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/MHProDev/MHDDoS">https://github.com/MHProDev/MHDDoS&lt;/a>
&lt;ul>
&lt;li>539 forks, 2.2k stars&lt;/li>
&lt;li>MHDDoS - DDoS Attack Script With 40 Methods&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/NewEraCracker/LOIC">https://github.com/NewEraCracker/LOIC&lt;/a>
&lt;ul>
&lt;li>539 forks, 1.9k stars&lt;/li>
&lt;li>C#&lt;/li>
&lt;li>network stress tool&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/PraneethKarnena/DDoS-Scripts">https://github.com/PraneethKarnena/DDoS-Scripts&lt;/a>
&lt;ul>
&lt;li>165 forks, 192 stars&lt;/li>
&lt;li>C, Python&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/theodorecooper/awesome-ddos-tools">https://github.com/theodorecooper/awesome-ddos-tools&lt;/a>
&lt;ul>
&lt;li>46 stars&lt;/li>
&lt;li>collection of ddos tools&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="防御工具">防御工具&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/AltraMayor/gatekeeper">https://github.com/AltraMayor/gatekeeper&lt;/a>
&lt;ul>
&lt;li>GPL-3.0 License&lt;/li>
&lt;li>159 forks, 737 stars&lt;/li>
&lt;li>C, Lua&lt;/li>
&lt;li>Gatekeeper is the first open source DoS protection system.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;del>&lt;a href="https://github.com/Exa-Networks/exabgp">https://github.com/Exa-Networks/exabgp&lt;/a>&lt;/del>
&lt;ul>
&lt;li>Apache like license&lt;/li>
&lt;li>415 forks, 1.8k stars&lt;/li>
&lt;li>Python&lt;/li>
&lt;li>The BGP swiss army knife of networking&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/curiefense/curiefense">https://github.com/curiefense/curiefense&lt;/a>
&lt;ul>
&lt;li>Apache 2.0 License&lt;/li>
&lt;li>60 forks, 386 stars&lt;/li>
&lt;li>Application-layer protection&lt;/li>
&lt;li>protects sites, services, and APIs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/qssec/Hades-lite">https://github.com/qssec/Hades-lite&lt;/a>
&lt;ul>
&lt;li>GPL-3.0 License&lt;/li>
&lt;li>24 forks, 72 stars&lt;/li>
&lt;li>C&lt;/li>
&lt;li>内核级 Anti-ddos 的驱动程序&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/snort3/snort3">https://github.com/snort3/snort3&lt;/a>
&lt;ul>
&lt;li>GPL-2.0 License&lt;/li>
&lt;li>372 forks, 1.4k stars&lt;/li>
&lt;li>next generation Snort IPS (Intrusion Prevention System)&lt;/li>
&lt;li>C++&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="流量监控">流量监控&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/netdata/netdata">https://github.com/netdata/netdata&lt;/a>
&lt;ul>
&lt;li>GPL-3.0 License&lt;/li>
&lt;li>5.2k forks, 58.3k stars&lt;/li>
&lt;li>C&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/giampaolo/psutil">https://github.com/giampaolo/psutil&lt;/a>
&lt;ul>
&lt;li>BSD-3-Clause License&lt;/li>
&lt;li>1.2 forks, 8.2k stars&lt;/li>
&lt;li>Python, C&lt;/li>
&lt;li>Cross-platform lib for process and system monitoring in Python, also network monitoring&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/iptraf-ng/iptraf-ng">https://github.com/iptraf-ng/iptraf-ng&lt;/a>
&lt;ul>
&lt;li>GPL-2.0 License&lt;/li>
&lt;li>22 forks, 119 stars&lt;/li>
&lt;li>C&lt;/li>
&lt;li>IPTraf-ng is a console-based network monitoring program for Linux that displays information about IP traffic.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>安全</title><link>https://blog.techfetch.dev/blog/%E5%AE%89%E5%85%A8/</link><pubDate>Fri, 28 Jun 2024 15:47:23 +0800</pubDate><guid>https://blog.techfetch.dev/blog/%E5%AE%89%E5%85%A8/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> _index&lt;/li>
&lt;/ul></description></item></channel></rss>