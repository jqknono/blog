<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloud Services on Nono Blogs</title><link>https://blog.jqknono.com/tags/cloud-services/</link><description>Recent content in Cloud Services on Nono Blogs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 25 Apr 2025 19:25:01 +0800</lastBuildDate><atom:link href="https://blog.jqknono.com/tags/cloud-services/index.xml" rel="self" type="application/rss+xml"/><item><title>Certificate Application Issues Caused by CNAME–TXT Conflicts</title><link>https://blog.jqknono.com/blog/2025/04/25/certificate-application-issues-caused-by-cnametxt-conflicts/</link><pubDate>Fri, 25 Apr 2025 19:25:01 +0800</pubDate><guid>https://blog.jqknono.com/blog/2025/04/25/certificate-application-issues-caused-by-cnametxt-conflicts/</guid><description>&lt;h2 id="cname-and-txt-records-with-the-same-prefix-cannot-coexist">CNAME and TXT Records With the Same Prefix Cannot Coexist&lt;/h2>
&lt;p>Anyone who has ever configured a domain knows that (A, AAAA) records cannot coexist with a CNAME, but most people have never run into a TXT vs. CNAME conflict.&lt;/p>
&lt;p>When would TXT and CNAME need the same prefix?&lt;/p>
&lt;p>One scenario occurs while applying for a Let’s Encrypt certificate and using the &lt;strong>&lt;em>DNS-01&lt;/em> challenge&lt;/strong> to prove domain ownership.&lt;/p>
&lt;ol>
&lt;li>Certbot creates a &lt;strong>TXT record&lt;/strong> for &lt;code>_acme-challenge.example.com&lt;/code>, using an akid/aksecret pair or a token.&lt;/li>
&lt;li>Let’s Encrypt queries the &lt;strong>TXT record&lt;/strong> to confirm that the applicant can modify DNS and therefore controls the domain.&lt;/li>
&lt;li>Let’s Encrypt issues the certificate.&lt;/li>
&lt;li>Certbot cleans up the &lt;strong>TXT record&lt;/strong> for &lt;code>_acme-challenge.example.com&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>If a &lt;strong>CNAME record&lt;/strong> for &lt;code>_acme-challenge.example.com&lt;/code> already exists when the &lt;strong>TXT record&lt;/strong> is created, the &lt;strong>TXT record&lt;/strong> insertion usually fails, causing the challenge to fail and the certificate to be denied.&lt;/p></description></item><item><title>Releasing Reserved Memory on a VPS</title><link>https://blog.jqknono.com/blog/2024/12/31/releasing-reserved-memory-on-a-vps/</link><pubDate>Tue, 31 Dec 2024 16:07:11 +0800</pubDate><guid>https://blog.jqknono.com/blog/2024/12/31/releasing-reserved-memory-on-a-vps/</guid><description>&lt;p>By default, the Linux kernel reserves a block of memory for &lt;code>kdump&lt;/code>, and its size is controlled by the &lt;code>crashkernel&lt;/code> parameter. Most application developers rarely trigger kernel panics, so you can recover this memory by editing &lt;code>/etc/default/grub&lt;/code>.&lt;/p>
&lt;p>If you do &lt;strong>not&lt;/strong> need &lt;code>kdump&lt;/code>, set the &lt;code>crashkernel&lt;/code> parameter to&lt;br>
&lt;code>0M-1G:0M,1G-4G:0M,4G-128G:0M,128G-:512M&lt;/code>; this releases the reserved memory.&lt;/p>
&lt;p>&lt;strong>Check current value&lt;/strong>: &lt;code>cat /etc/default/grub&lt;/code>&lt;/p>
&lt;p>Typical default:&lt;/p>
&lt;blockquote>
&lt;p>GRUB_CMDLINE_LINUX=&amp;quot; vga=792 console=tty0 console=ttyS0,115200n8 net.ifnames=0 noibrs nvme_core.io_timeout=4294967295 nvme_core.admin_timeout=4294967295 iommu=pt crashkernel=0M-1G:0M,1G-4G:192M,4G-128G:384M,128G-:512M crash_kexec_post_notifiers=1&amp;quot;&lt;/p></description></item></channel></rss>