<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Copilot Series on Nono Blogs</title><link>https://blog.jqknono.com/tags/copilot-series/</link><description>Recent content in Copilot Series on Nono Blogs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 04 Mar 2025 11:22:40 +0800</lastBuildDate><atom:link href="https://blog.jqknono.com/tags/copilot-series/index.xml" rel="self" type="application/rss+xml"/><item><title>GitHub Copilot Paid Models Comparison</title><link>https://blog.jqknono.com/blog/2025/03/04/github-copilot-paid-models-comparison/</link><pubDate>Tue, 04 Mar 2025 11:22:40 +0800</pubDate><guid>https://blog.jqknono.com/blog/2025/03/04/github-copilot-paid-models-comparison/</guid><description>&lt;p>&lt;img src="https://img1.techfetch.dev/blog/202503041205012.png" alt="7 models">&lt;/p>
&lt;p>GitHub Copilot currently offers 7 models:&lt;/p>
&lt;ul>
&lt;li>Claude 3.5 Sonnet&lt;/li>
&lt;li>Claude 3.7 Sonnet&lt;/li>
&lt;li>Claude 3.7 Sonnet Thinking&lt;/li>
&lt;li>Gemini 2.0 Flash&lt;/li>
&lt;li>GPT-4o&lt;/li>
&lt;li>o1&lt;/li>
&lt;li>o3-mini&lt;/li>
&lt;/ul>
&lt;p>The official documentation lacks an introduction to these seven models. This post briefly describes their ratings across various domains to highlight their specific strengths, helping readers switch to the most suitable model when tackling particular problems.&lt;/p>
&lt;h2 id="model-comparison">Model Comparison&lt;/h2>
&lt;p>Multi-dimensional comparison table based on publicly available evaluation data (some figures are estimates or adjusted from multiple sources), covering three key metrics: coding (SWE-Bench Verified), math (AIME’24), and reasoning (GPQA Diamond).&lt;/p></description></item><item><title>Hands-on Experience with GitHub Copilot Agent Mode</title><link>https://blog.jqknono.com/blog/2025/02/28/hands-on-experience-with-github-copilot-agent-mode/</link><pubDate>Fri, 28 Feb 2025 17:46:31 +0800</pubDate><guid>https://blog.jqknono.com/blog/2025/02/28/hands-on-experience-with-github-copilot-agent-mode/</guid><description>&lt;p>This post summarizes how to use GitHub Copilot in Agent mode, sharing practical experience.&lt;/p>
&lt;p>&lt;img src="https://img1.techfetch.dev/blog/202503041211061.png" alt="">&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>Use VSCode Insider;&lt;/li>
&lt;li>Install the GitHub Copilot (Preview) extension;&lt;/li>
&lt;li>Select the Claude 3.7 Sonnet (Preview) model, which excels at code generation; other models may be superior in speed, multi-modal (e.g. image recognition) or reasoning capabilities;&lt;/li>
&lt;li>Choose &lt;strong>Agent&lt;/strong> as the working style.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img1.techfetch.dev/qt/202502191622707.png" alt="Prerequisites">&lt;/p>
&lt;h2 id="step-by-step">Step-by-step&lt;/h2>
&lt;ol>
&lt;li>Open the “Copilot Edits” tab;&lt;/li>
&lt;li>Attach items such as “Codebase”, “Get Errors”, “Terminal Last Commands”;&lt;/li>
&lt;li>Add files to the “Working Set”; it defaults to the currently opened file, but you can manually choose others (e.g. “Open Editors”);&lt;/li>
&lt;li>Add “Instructions”; type the prompt that you especially want the Copilot Agent to notice;&lt;/li>
&lt;li>Click “Send” and watch the Agent perform.&lt;/li>
&lt;/ol>
&lt;h2 id="additional-notes">Additional notes&lt;/h2>
&lt;ul>
&lt;li>VSCode language extensions’ lint features produce Errors or Warnings; the Agent can automatically fix the code based on those hints.&lt;/li>
&lt;li>As the conversation continues, the modifications may drift from your intent. Keep every session tightly scoped to a single clear topic; finish the short-term goal and start a new task rather than letting the session grow too long.&lt;/li>
&lt;li>Under “Working Set”, the “Add Files” menu provides a “Related Files” option which recommends related sources.&lt;/li>
&lt;li>Watch the line count of individual files to avoid burning tokens.&lt;/li>
&lt;li>Generate the baseline first, then tests. This allows the Agent to debug and self-verify with test results.&lt;/li>
&lt;li>To constrain modifications, you can add the following to settings.json; it only alters files in the designated directory (for reference):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;github.copilot.chat.codeGeneration.instructions&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Only modify files under ./script/; leave others unchanged.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;If the target file exceeds 1,000 lines, place new functions in a new file and import them; if the change would make the file too long you may disregard this rule temporarily.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;github.copilot.chat.testGeneration.instructions&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Generate test cases in the existing unit-test files.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;After any code changes, always run the tests to verify correctness.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="common-issues">Common issues&lt;/h2>
&lt;h3 id="desired-business-logic-code-is-not-produced">Desired business logic code is not produced&lt;/h3>
&lt;p>Break large tasks into small ones; one session per micro-task. A bloated context makes the model’s attention scatter.&lt;/p></description></item><item><title>Copilot Series</title><link>https://blog.jqknono.com/blog/tools/ai/copilot-series/</link><pubDate>Fri, 28 Jun 2024 15:58:17 +0800</pubDate><guid>https://blog.jqknono.com/blog/tools/ai/copilot-series/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> Copilot Series&lt;/li>
&lt;/ul></description></item></channel></rss>